

----------------------------

/*void InfosVisionnage::Print()
{
    std::wstring wstr;
    bool chiffre_et_point_ou_pas = Print_Titre_chiffre_et_point_ou_pas(m_NumeroEpisode);
    if (chiffre_et_point_ou_pas)
    {
        wstr = std::to_wstring(m_NumeroSaison) + keyColor[1] + L'x' + valuesColor + std::to_wstring(m_NumeroEpisode) + keyColor[1] + L" : " + valuesColor;
    }
    wstr += keyColor[1] + m_titre + valuesColor;
    if (m_deux_points != L"")
        wstr += m_deux_points + keyColor[1] + m_sous_titre + valuesColor;
    if (m_numero == 1)
    {
        wstr += keyColor[1] + L" (" + valuesColor + std::to_wstring(m_duree / 60) + keyColor[1] + m_min + L')' + valuesColor;
    }
    else
    {
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(numero++) + keyColor[1] + L']' + valuesColor;
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(saison_episode.numero++) + keyColor[1] + L']' + valuesColor;
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(1 + saison_episode.numero++) + keyColor[1] + L']' + valuesColor;
        //numero++;
        //saison_episode.numero++;
    }
    wstr += keyColor[1] + L" : " + valuesColor;
    wstr += Print_Dates_de_visionnage(m_DatesVisionnage);

    // phrases
    if (m_numero == 1)//titre != L"")
    {
        wstr += L"\r\n" + m_phrases;
        //saison_episode.numero = 1;
    }
    std::wcout << wstr << std::endl;
}*/

/*std::wstring InfosVisionnage::Print_Dates_de_visionnage(std::vector<DateRecord>& dates_de_visionnage)
{
    const std::wstring date_format = L"%d" + keyColor[1] + L"/" + valuesColor + L"%m" + keyColor[1] + L"/" + valuesColor + L"%Y";
    const std::wstring between_parenthesis = keyColor[1] + L"(" + valuesColor + L"%s" + keyColor[1] + L")" + valuesColor;
    const std::wstring same_date_format = between_parenthesis;
    const std::wstring prequel_format = between_parenthesis;
    const std::wstring streaming_format = keyColor[1] + L" : " + valuesColor + L"%s";
    const std::wstring step_by_step_tag = L' ' + keyColor[1] + L'[' + valuesColor + L"pas-à-pas" + keyColor[1] + L']' + valuesColor;

    std::wstring dates_de_visionnage_wstr = L"";

    std::vector<std::wstring> v_wstr;
    std::time_t last_date{ 0 };
    int same_date_counter = 0;
    for (auto dr : dates_de_visionnage)
    {
        std::time_t time = std::mktime(&dr.date);

        if (last_date != time)
        {
            std::tm localtime = *std::localtime(&time);
            std::wstringstream target_stream;
            target_stream << std::put_time(&localtime, date_format.c_str());
            std::wstring date_str = target_stream.str();
            v_wstr.push_back(date_str);
            same_date_counter = 0;
        }
        else
        {
            same_date_counter++;
            if (same_date_counter == 1)
            {
                v_wstr.back() += wstring_format(same_date_format, L"1");
            }
            v_wstr.back() += wstring_format(same_date_format, std::to_wstring(same_date_counter + 1).c_str());
        }
        last_date = time;
    }

    for (auto i = 0; i < v_wstr.size(); i++)
    {
        if (i != 0)
            dates_de_visionnage_wstr += L", ";
        dates_de_visionnage_wstr += v_wstr[i];
    }

    if (dates_de_visionnage.size() == 1)
    {
        if (dates_de_visionnage[0].someFlag)
            dates_de_visionnage_wstr += wstring_format(prequel_format, L"stop ou pas !");
    }
    else
    {
        if (dates_de_visionnage.size() > 0)
        {
            if (dates_de_visionnage.back().someFlag)
            {
                dates_de_visionnage_wstr += wstring_format(prequel_format, L"à suivre");
            }
            dates_de_visionnage_wstr += step_by_step_tag;
        }
    }

    if (m_streaming != L"" && dates_de_visionnage_wstr.length() > 0)
        dates_de_visionnage_wstr += wstring_format(streaming_format, m_streaming.c_str());
    //
    return dates_de_visionnage_wstr;
}*/

/*bool InfosVisionnage::Print_Titre_chiffre_et_point_ou_pas(unsigned short int episode)
{
    if (episode == 0)
        return false;
    return true;
}*/

------------------------------
/*std::wstring SequenceVisionnage::Print_Dates_de_visionnage(std::vector<DateRecord>& m_DatesVisionnage)
{
    const std::wstring date_format = L"%d" + keyColor[1] + L"/" + valuesColor + L"%m" + keyColor[1] + L"/" + valuesColor + L"%Y";
    const std::wstring between_parenthesis = keyColor[1] + L"(" + valuesColor + L"%s" + keyColor[1] + L")" + valuesColor;
    const std::wstring same_date_format = between_parenthesis;
    const std::wstring prequel_format = between_parenthesis;
    const std::wstring streaming_format = keyColor[1] + L" : " + valuesColor + L"%s";
    const std::wstring step_by_step_tag = L' ' + keyColor[1] + L'[' + valuesColor + L"pas-à-pas" + keyColor[1] + L']' + valuesColor;

    std::wstring dates_de_visionnage_wstr = L"";

    std::vector<std::wstring> v_wstr;
    std::time_t last_date{ 0 };
    int same_date_counter = 0;
    for (auto dr : m_DatesVisionnage)
    {
        std::time_t time = std::mktime(&dr.date);

        if (last_date != time)
        {
            std::tm localtime = *std::localtime(&time);
            std::wstringstream target_stream;
            target_stream << std::put_time(&localtime, date_format.c_str());
            std::wstring date_str = target_stream.str();
            v_wstr.push_back(date_str);
            same_date_counter = 0;
        }
        else
        {
            same_date_counter++;
            if (same_date_counter == 1)
            {
                v_wstr.back() += wstring_format(same_date_format, L"1");
            }
            v_wstr.back() += wstring_format(same_date_format, std::to_wstring(same_date_counter + 1).c_str());
        }
        last_date = time;
    }

    for (auto i = 0; i < v_wstr.size(); i++)
    {
        if (i != 0)
            dates_de_visionnage_wstr += L", ";
        dates_de_visionnage_wstr += v_wstr[i];
    }

    if (m_DatesVisionnage.size() == 1)
    {
        if (m_DatesVisionnage[0].someFlag)
            dates_de_visionnage_wstr += wstring_format(prequel_format, L"stop ou pas !");
    }
    else
    {
        if (m_DatesVisionnage.size() > 0)
        {
            if (m_DatesVisionnage.back().someFlag)
            {
                dates_de_visionnage_wstr += wstring_format(prequel_format, L"à suivre");
            }
            dates_de_visionnage_wstr += step_by_step_tag;
        }
    }

    if (m_streaming != L"" && dates_de_visionnage_wstr.length() > 0)
        dates_de_visionnage_wstr += wstring_format(streaming_format, m_streaming.c_str());
    //
    return dates_de_visionnage_wstr;
}*/


----------------------------

/*void Saison::creer_InfosVisionnage(fs::path const& m_cheminFichier)
{
    auto nomFichier = m_cheminFichier.filename().wstring();

    assert(nomFichier.length() > 0 && L"Nom de fichier vide");
    InfosVisionnage infosvisionnage(m_cheminFichier);
    infosvisionnages.push_back(infosvisionnage);
    //Episode episode(m_cheminFichier);
    //episodes.push_back(episode); // Episode
}*/

/*Episode Saison::creer_Episode(InfosVisionnage const& seq_vis)
{
    ;
}*/

//Episode Saison::creer_Episode(SequenceVisionnage const& seq_vis)
/*Episode Saison::creer_Episode(InfosVisionnage const& seq_vis)
{
    //    auto nomFichier = m_cheminFichier.filename().wstring();
    //m_liste_sequence_visionnages.push_back(seq_vis);
//    m_liste_episodes.insert({ 2, seq_vis });
    m_liste_episodes.emplace( 1, seq_vis );
    //    assert(nomFichier.length() > 0 && L"Nom de fichier vide");
        //Episode episode(cheminFichier);
    //    SequenceVisionnage(m_cheminFichier);
        //episodes.push_back(episode); // Episode
    //    sequencevisionnages.push_back(sequencevisionnage);
}*/


// ######################################################################################################################################################
// #                                                                                                                                                    #
// # void Saison::creer_SequenceVisionnage(fs::path const& m_cheminFichier)                                                                             #
// #                                                                                                                                                    #
// ######################################################################################################################################################

//void Saison::creer_SequenceVisionnage(fs::path const& m_cheminFichier)
//{
//    auto nomFichier = m_cheminFichier.filename().wstring();
//    assert(nomFichier.length() > 0 && L"Nom de fichier vide");
//    Episode episode(m_cheminFichier);
//    episodes.push_back(episode); // Episode
//}

// ######################################################################################################################################################
// #                                                                                                                                                    #
// # void Saison::initialiser_Dossier(fs::path const& m_cheminFichier)                                                                                  #
// #                                                                                                                                                    #
// ######################################################################################################################################################

/*void Saison::initialiser_Dossier(fs::path const& m_cheminFichier)
{
    auto nomDossier = m_cheminFichier.filename().wstring();
    assert(nomDossier.length() > 0 && L"Nom de dossier vide");
    assert(nomDossier.length() > 9 && L"Nom de fichier trop court pour avoir au moins une date");
    std::size_t pos = 0;
    std::wstring wstr = nomDossier.substr(pos);

    wchar_t sp = L' ', tiret = L'-';
    //int y;
    auto y = std::stoi(wstr, &pos);
    assert(1582 <= y && L"L'année est inférieur !");
    wstr = wstr.substr(4);
    try
    {
        test_date_tire(wstr[0]);
    }
    catch (exception_date_tiret e2)
    {
        std::wcout << L"Exception a été capturée : " << e2.get_message() << std::endl;
        exit(1);
    }
    wstr = wstr.substr(1);
    auto m = std::stoi(wstr, &pos);
    assert((1 <= m && m <= 12) && L"Le mois invalide !");
    wstr = wstr.substr(2);
    try
    {
        test_date_tire(wstr[0]);
    }
    catch (exception_date_tiret e2)
    {
        std::wcout << L"Exception a été capturée : " << e2.get_message() << std::endl;
        exit(1);
    }
    wstr = wstr.substr(1);
    auto d = std::stoi(wstr, &pos);
    assert((1 <= d && d <= 31) && L"Le jour invalide !");
    if (!checkday(m, d, y))
    {
        std::wcout << L"Le jour invalide !!!!" << std::endl;
        exit(1);
    }
    std::tm tm;
    tm.tm_year = y - 1900;
    tm.tm_mon = m - 1;
    tm.tm_mday = d;
    wstr = wstr.substr(2);
    m_dossier.first = tm;
    m_dossier.second = wstr;
}*/

------------------------------

/*const int Serie::afficher_Diffusee(int& I, std::wstring const& d)
{
#if	Serie_afficher_Diffusee_ == 1
    //wcout << B_T << L"const int Serie_afficher_Diffusee(" << I + 1 << L", " << d << L") :" << B_t << endl;
    B.Ok_T(L"const int Serie_afficher_Diffusee(" + std::to_wstring(I) + L", " + d + L") :");
#endif
    if (d == L"")
    {
#if	Serie_afficher_Diffusee_ == 1
        //wcout << L"    " << L"Date_Diffusee_a_partir_de[" << I << L"] = 0 !!!" << endl;
        B.Ok_W(L"Date_Diffusee_a_partir_de[" + std::to_wstring(I) + L"} = 0 !!!");
#endif
        B.Ok_T(L"const int Serie_afficher_Diffusee() : Ok !");
        return EXIT_SUCCESS;
    }
    if (
        (d[0] == L'1' || d[0] == L'2' || d[0] == L'3') &&
        std::isdigit(d[1]) &&
        std::isdigit(d[2]) &&
        std::isdigit(d[3]))
    {
        goto stop;
    }
    E.afficher_X(-1, L"", d);
    return EXIT_FAILURE;
stop:
    int year = 0, mon = 0, mday = 0;
    // %d/%m/%Y
    std::tm D = { 0 };
    // year
    std::wstring x = d.substr(0, 4);
    year = std::stoi(x);
    if (
        (d[0] == L'1' || d[0] == L'2' || d[0] == L'3') &&
        //(d[1] == L'0' || d[1] == L'1' || d[1] == L'2' || d[1] == L'3' || d[1] == L'4' || d[1] == L'5' || d[1] == L'5' || d[1] == L'6' || d[1] == L'7' || d[1] == L'8' || d[1] == L'9') &&
        //(d[2] == L'0' || d[2] == L'1' || d[2] == L'2' || d[2] == L'3' || d[2] == L'4' || d[2] == L'5' || d[2] == L'5' || d[2] == L'6' || d[2] == L'7' || d[2] == L'8' || d[2] == L'9') &&
        //(d[3] == L'0' || d[3] == L'1' || d[3] == L'2' || d[3] == L'3' || d[3] == L'4' || d[3] == L'5' || d[3] == L'5' || d[3] == L'6' || d[3] == L'7' || d[3] == L'8' || d[3] == L'9')
        std::isdigit(d[1]) &&
        std::isdigit(d[2]) &&
        std::isdigit(d[3])
        )
    {
        x = d.substr(0, 4);
        year = std::stoi(d);
        if (year <= 1900 || year >= 3001)
        { // Erreur year
#if Serie_afficher_Diffusee_ == 1
            //wcerr << L"    " << L"year=" << year << endl;
            B.Ok_W(L"year=" + std::to_wstring(year));
#endif
            return EXIT_FAILURE;
        }
    }
    else
    {
#if Serie_afficher_Diffusee_ == 1
        //wcout << L"    " << L"year=???" << endl;
        B.Ok_W(L"year=???");
#endif
        return EXIT_FAILURE;
    }
    if (
        (d[5] == L'0' || d[5] == L'1') &&
        //(d[6] == L'0' || d[6] == L'1' || d[6] == L'2' || d[6] == L'3' || d[6] == L'4' || d[6] == L'5' || d[6] == L'6' || d[6] == L'7' || d[6] == L'8' || d[6] == L'9')
        std::isdigit(d[6])
        )
    {
        x = d.substr(5, 2);
        mon = std::stoi(x);
        if (mon <= 0 || mon >= 13)
        { // Erreur mon
#if Serie_afficher_Diffusee_ == 1
            //wcerr << L"    " << L"mon=" << mon << endl;
            B.Ok_W(L"mon=" + std::to_wstring(mon));
#endif
            return EXIT_FAILURE;
        }
    }
    if (
        (d[8] == L'0' || d[8] == L'1' || d[8] == L'2' || d[8] == L'3') &&
        //(d[9] == L'0' || d[9] == L'1' || d[9] == L'2' || d[9] == L'3' || d[9] == L'4' || d[9] == L'5' || d[9] == L'6' || d[9] == L'7' || d[9] == L'8' || d[9] == L'9')
        std::isdigit(d[9])
        )
    {
        x = d.substr(8, 2);
        mday = std::stoi(x);
        if (mday <= 0 || mday >= 32)
        { // Erreur mday
#if Serie_afficher_Diffusee_ == 1
            //wcerr << L"    " << L"mday=" << mday << endl;
            B.Ok_W(L"mday=" + std::to_wstring(mday));
#endif
            return EXIT_FAILURE;
        }
    }
    D.tm_year = year - 1900;
    D.tm_mon = mon - 1;
    D.tm_mday = mday;
#if Serie_afficher_Diffusee_ == 1
    //wcout << L"    " << L"[" << year << L"/" << mon << L"/" << mday << L"]" << endl;
    B.Ok_W(L'{' + to_wstring(year) + L'/' + std::to_wstring(mon) + L'/' + to_wstring(mday) + L'}');
#endif
    Date_Diffusee_a_partir_de[I] = D;
    Date_Diffusee_a_partir_de_[I] = true;
#if	Serie_afficher_Diffusee_ == 1
    //wcout << B_T << L"const int Serie_afficher_Diffusee(" << I + 1 << L", " << d << L") : Ok !" << B_t << endl;
    B.Ok_T(L"const int Serie_afficher_Diffusee() : Ok !");
#endif
    return EXIT_SUCCESS;
}
*/




------------------------- 
    /*if (m_titres.size() == 1 && t.size() == 1 && m_titres == t)
    {
        found = true;
    }*/
/*    if (m_titres[0] == t[0])
        assert(m_titres[0] == t[0] && L"Erreur : m_titre[0] != t[0] !!!");
    bool found = false;
    if (!found && m_titres[0].size() == t[0].size())
    {
        int j = 0;
        for (int i = 0; i < m_titres.size(); i++)
        {
            if (m_titres[i] != t[i])
            {
                j++;
                m_titres[i] = t[i];
            }

        }
        try
        {
            if (j > 2)
                ;
            else
            {
                throw 505;
            }
        }
        catch (...)
        {
            std::wcout << L"Erreur : j > 4" << std::endl;
        }
        if (m_titres.size() == 1 && t.size() == 1)
        {
            //m_titres[0] = t[0];
            //throw wstring(L"ERREUR : m_titres[0] par de... !");
            found = true;
        }
    }
    if (!found && m_titres.size() == 3 && m_titres[0].length() == t[0].length() && m_titres[2].length() == t[2].length())
    {
        m_titres[1] = t[1];
        found = true;
    }
*/
    //???


------------
    /*int tm_year = 0;// , tm_mon = 0, tm_mday = 0;
    std::wstring t2;
    std::size_t idx, idx2 = 0;
    idx = nomFichier.find(L".[", 0);
    t2 = nomFichier.substr(0, idx);
    //i = ::afficher_Titre(t2, titre, affichage_titre_actif);
    m_titres2 = t2;
    idx = nomFichier.find_last_of(L"[");
    idx2 = nomFichier.find_last_of(L"]");
    if (idx2 - idx - 1 == 0)
        return;// -1;
    idx2--;
    if (!(nomFichier.at(idx2) == L' ' || nomFichier.at(idx2) == L'-' ||
        nomFichier.at(idx2) == L'0' || nomFichier.at(idx2) == L'1' || nomFichier.at(idx2) == L'2' || nomFichier.at(idx2) == L'3' || nomFichier.at(idx2) == L'4' ||
        nomFichier.at(idx2) == L'5' || nomFichier.at(idx2) == L'6' || nomFichier.at(idx2) == L'7' || nomFichier.at(idx2) == L'8' || nomFichier.at(idx2) == L'9'))
    { // Sur
        std::size_t idx3;
        idx3 = nomFichier.find_first_of(L" ", idx);
        idx3++;
        t2 = nomFichier.substr(idx3, idx2 - idx3 + 1);
        initialiser_Sur(t2);
        if (m_sur == t2)
        {
            //
        }
        else
        {
            m_sur = t2;
        }
        //if (m_sur == L"Netflix")
        //    netflix_ok_ou_non = true;
        idx2 = idx3 - 2;
    }
    idx++;
    if (nomFichier.at(idx2) == L' ' || nomFichier.at(idx2) == L'-' ||
        nomFichier.at(idx2) == L'0' || nomFichier.at(idx2) == L'1' || nomFichier.at(idx2) == L'2' || nomFichier.at(idx2) == L'3' || nomFichier.at(idx2) == L'4' ||
        nomFichier.at(idx2) == L'5' || nomFichier.at(idx2) == L'6' || nomFichier.at(idx2) == L'7' || nomFichier.at(idx2) == L'8' || nomFichier.at(idx2) == L'9')
    { // Date
        t2 = nomFichier.substr(idx, idx2 - idx + 1);
        //i = afficher_Date(t2);
    }
    idx = nomFichier.find(L"].");
    if (idx != std::wstring::npos)
    { // Sous_Genre
        idx += 2;
        m_sous_genre = nomFichier.substr(idx);
        //wstring sous_genre = L"";
        initialiser_Sous_Genre(m_sous_genre);
        //affichage_sous_genre_actif = true;
    }*/

// ######################################################################################################################################################
// #                                                                                                                                                    #
// # const std::wstring Serie::format_Annees()                                                                                                          #
// #                                                                                                                                                    #
// ######################################################################################################################################################

/*const std::wstring Serie::format_Annees()
{
    //assert(m_annees.length() > 0 && L"L'année---");// ???
    //assert(m_annees.size() < 10 && L"L'année 2---");// ???
    bool found = false;

    std::wstring annees_str = calculer_Annee_Debut();
    std::size_t pos = 0;
    std::wstring wstr = m_annees.substr(4);
    if (!found && wstr[0] != L'-')
        found = true;
    if (!found)
    {
        try
        {
            test_date_tire(wstr[0]);
        }
        catch (exception_date_tiret e2)
        {
            std::wcout << L"Exception a été capturée : " << e2.get_message() << std::endl;
        }
        annees_str += keyColor[1] + L'-';
        wstr = wstr.substr(1);

        if (!found && wstr.length() == 0)
        {
            found = true;
        }
        if (!found)
        {
            found = true;
            annees_str += valuesColor + calculer_Annee_Fin(wstr);
        }
    }
    return keyColor[0] + L" (" + valuesColor + annees_str + keyColor[0] + L')' + valuesColor;
}*/

/*std::wstring Serie::format_Annees()
{
    int i = 1;
    if (m_f_anneesProduction.first && m_f_anneesProduction.second)
    {
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(m_f_anneesProduction.first.value()) + keyColor[1] + L'-' + valuesColor + std::to_wstring(m_f_anneesProduction.second.value()) + keyColor[0] + L')' + valuesColor;
    }
    else if (m_f_anneesProduction.first)
    {
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(m_f_anneesProduction.first.value()) + keyColor[0] + L')' + valuesColor;
    }
    else
    {
        std::pair<int, int> anneesDiffusion = calculer_Annees_Diffusion();
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(anneesDiffusion.first) + keyColor[1] + L'-' + valuesColor + std::to_wstring(anneesDiffusion.second) + keyColor[0] + L')' + valuesColor;
    }
}*/
/*std::wstring Serie::format_Annees()
{
    if (m_f_anneesProduction.first && m_f_anneesProduction.second)
    {
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(m_f_anneesProduction.first.value()) + keyColor[1] + L'-' + valuesColor + std::to_wstring(m_f_anneesProduction.second.value()) + keyColor[0] + L')' + valuesColor;
    }
    else if (m_f_anneesProduction.first)
    {
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(m_f_anneesProduction.first.value()) + keyColor[0] + L')' + valuesColor;
    }
    else
    {
        std::pair<int, int> anneesDiffusion = calculer_Annees_Diffusion();
        return keyColor[0] + L" (" + valuesColor + std::to_wstring(anneesDiffusion.first) + keyColor[1] + L'-' + valuesColor + std::to_wstring(anneesDiffusion.second) + keyColor[0] + L')' + valuesColor;
    }
}*/

--------------

InfosVisionnage::InfosVisionnage(const Saison& saison, fs::path const& m_cheminFichier) : m_saison{ saison }
{
...
    std::vector<std::wstring> t = lire_fichierTxt(m_cheminFichier.wstring(), { L"\n" }, false);

    m_NumeroEpisode = std::stoi(match[filename_numero_episode_index]);

    size_t pos;// = 0;
    pos = t[0].find(L". ");
    if (pos == std::wstring::npos || t[0][3] == L'.')
    {
        //saison = 0;
        m_NumeroEpisode = 0;
    }
    else
    {
        m_NumeroEpisode = std::stoi(t[0]);
        t[0] = t[0].substr(pos + 2);
    }
    // ben non !!!
    // episode = std::stoi(t[0]);

    bool found = false;

    /*std::wsmatch soustitre_match;
    const std::wregex soustitre_format_rg{ L"(.+) \\: (.+)" };
    if (std::regex_match(titre, soustitre_match, soustitre_format_rg))
    {
        titre = soustitre_match[1];
        sous_titre = soustitre_match[2];
        //sous_titre = keyColor[1] + L"xxx" + valuesColor + soustitre_match[2];
        found = true;
    }
    const std::wregex soustitre_format_rg2{ L"(.+)\\: (.+)" };
    if (std::regex_match(titre, soustitre_match, soustitre_format_rg2))
    {
        titre = soustitre_match[1];
        sous_titre = soustitre_match[2];
        found = true;
    }
    const std::wregex soustitre_format_rg3{ L"(.+)\\/(.+)" };
    if (std::regex_match(titre, soustitre_match, soustitre_format_rg3))
    {
        titre = soustitre_match[1];
        sous_titre = soustitre_match[2];
        found = true;
    }
    const std::wregex soustitre_format_rg4{ L"(.+) \\- (.+)" };
    if (std::regex_match(titre, soustitre_match, soustitre_format_rg4))
    {
        titre = soustitre_match[1];
        sous_titre = soustitre_match[2];
        found = true;
    }*/

    const std::wstring d_p = L" : ";
    pos = t[0].find(d_p);
    if (!found && pos != std::wstring::npos)
    {
        m_titres.push_back(t[0].substr(0, pos));
        m_titres.push_back(d_p);
        m_titres.push_back(t[0].substr(pos + 3));
        found = true;
    }
    const std::wstring d_p2 = L": ";
    pos = t[0].find(d_p2);
    if (!found && pos != std::wstring::npos)
    {
        m_titres.push_back(t[0].substr(0, pos));
        m_titres.push_back(d_p2);
        m_titres.push_back(t[0].substr(pos + 2));
        found = true;
    }
    const std::wstring d_p3 = L"/";
    pos = t[0].find(d_p3);
    if (!found && pos != std::wstring::npos)
    {
        m_titres.push_back(t[0].substr(0, pos));
        m_titres.push_back(d_p3);
        m_titres.push_back(t[0].substr(pos + 1));
        found = true;
    }
    const std::wstring d_p4 = L" - ";
    pos = t[0].find(d_p4);
    if (!found && pos != std::wstring::npos)
    {
        m_titres.push_back(t[0].substr(0, pos));
        m_titres.push_back(d_p4);
        m_titres.push_back(t[0].substr(pos + 3));
        found = true;
    }
    if (!found)
    {
        m_titres.push_back(t[0]);
        found = true;
    }
    t.erase(t.begin());
    //m_fichier_pas_zero = true;
    //m_numero = 1;
    initialiser_Duree(t[0]);
    t.erase(t.begin());
    m_resume = t;
}






    //auto nomDossier = racine./*filename().*/;// wstring();

    bool found = false;

    auto nomDossier = racine;
    std::size_t pos = 0, pos2 = 0;
    pos = nomDossier.find_last_of(L"\\");
    if (pos != std::wstring::npos)
        exit(1);
    nomDossier = nomDossier.substr(pos + 1);
    assert(nomDossier.length() > 0 && L"Nom de dossier vide");

    pos = nomDossier.find(L".[");
    if (pos == std::wstring::npos)
    {
        std::wcout << nomDossier[pos] << std::endl;
        std::wcout << nomDossier << std::endl;
        exit(1);
    }
    pos2 = nomDossier.find(L")");
    if (pos2 != std::wstring::npos)
        exit(1);
    else if (pos > pos2)
        exit(1);
    else
    {
        found = true;
        Serie serie(racine);
        for (const auto& entry_serie : fs::directory_iterator((serie.getRacine())))
        {
            if (entry_serie.is_regular_file())
            {
                serie.initialiser_Fichier(entry_serie);
                continue;
            }
            if (fs::is_directory(entry_serie))
            {
                Saison saison(entry_serie, serie);
                for (const auto& entry_saison : fs::directory_iterator(entry_serie))
                {
                    if (entry_saison.is_regular_file())
                    {
                        saison.initialiser_Fichier(entry_saison);
                    }
                }
                serie.saisons.push_back(saison);
            }
        }
        serie.Print();
    }


    //const std::wstring d_p = L" - ";
    //pos = titres.find(d_p);

    //if(!found && ())






ajouter_InfosVisionnage(info_vis)
creer_Episode(info_vis)

Print_Netflix()

SequenceVisionnage sequencevisionnage(seq_vis);

Non : std::vector<DateRecord> dates_de_visionnage{ 0 };

Oui : std::vector<SequenceVisionnage> m_liste_visionnages{ 0 };

void Episode::Print()
{
    PrintData();
    for (auto vis : m_liste_visionnages)
    {
        vis.Print();
    }
}



void Serie::afficher_Fichier(fs::path const& cheminFichier)
...
const void Serie::Print_Episodes(Saison saison)
...
const void Serie::Print_Saison(Saison saison)
...
const void Serie::Print_Saisons()





/*void Episode::Print()
{
    std::wstring wstr;
    bool chiffre_et_point_ou_pas = Print_Titre_chiffre_et_point_ou_pas(episode);
    if (chiffre_et_point_ou_pas)
    {
        wstr = std::to_wstring(saison) + keyColor[1] + L'x' + valuesColor + std::to_wstring(episode) + keyColor[1] + L" : " + valuesColor;
    }
    wstr += keyColor[1] + titre + valuesColor;
    if (deux_points != L"")
        wstr += deux_points + keyColor[1] + sous_titre + valuesColor;
    if (numero == 1)
    {
        wstr += keyColor[1] + L" (" + valuesColor + std::to_wstring(duree_en_seconde / 60) + keyColor[1] + min + L')' + valuesColor;
    }
    else
    {
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(numero++) + keyColor[1] + L']' + valuesColor;
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(saison_episode.numero++) + keyColor[1] + L']' + valuesColor;
        //wstr += keyColor[1] + L" [" + valuesColor + std::to_wstring(1 + saison_episode.numero++) + keyColor[1] + L']' + valuesColor;
        //numero++;
        //saison_episode.numero++;
    }
    wstr += keyColor[1] + L" : " + valuesColor;
    wstr += Print_Dates_de_visionnage(dates_de_visionnage);

    // phrases
    if (numero == 1)//titre != L"")
    {
        wstr += L"\r\n" + phrases;
        //saison_episode.numero = 1;
    }
    std::wcout << wstr << std::endl;
}*/
